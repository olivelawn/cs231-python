t2.py: I was not able to pass the full path name to the program, (i.e. python3 /users/abrick/pr/131B/2625/t2.py /users/abrick/resources/urantia.txt resulted in a File not found). It looks like you hardcoded /users/abrick/resources/ into your startpath. Once i provided cmdline arg of just "urantia.txt" seems to work! I see that you used a regex to count actual words, not just spaces around numbers. I see lots of error handling too. Nice!
8z.py: Lots of good stuff in this program. I see lots of logic to not count numbers/periods as words. Haven't seen a main() function yet. Reminds me a bit of C style programming. Nice work.
fu.py: Simple and concise. Most programs (including the unix utility wc--stands for word count) return a smaller number of words(wc returns 1112604 and yours 1,113,996), but no biggie. I haven't seen that comma "{:,}" syntax before! Looks good and well commented.
py.py: Quick and dirty. I like it. Lots of folks seem to be parsing the txt for actual words, but I also did what you did--I used the unix "wc" command to model my program after, which also returns 1112604. Nice error handling and comments.
tn.py: Program works although took me a sec to figure out I needed to pass an argument--no biggie. Program is short and sweet and well commented. Returns same word count as unix "wc" command as well!
wn.py: Program is concise. It returns a few more words than most other programs including the unix "wc" command. Could use a few more comments, otherwise nice work.
cu.py: Very concise and nice error handling with try/except. Your word count matches the unix "wc" cmd. Sweet. Nice job.
